/**
 * The Queue type. It can be one of:
 * * `FIFO` - First In First Out
 * * `LIFO` - Last In First Out
 */
declare type QueueType = "FIFO" | "LIFO";

declare class QueueMeta<T = unknown> {
    private internalQueue;
    method: QueueType;
    constructor(method?: QueueType);
    set(items: T[]): this;
    has(item: T): boolean;
    get raw(): T[];
    insert(item: T): T;
    remove(item: T): false | T;
    shuffle(excludeFirst?: boolean): void;
    clear(): void;
    shift(): {
        item: T;
        index: number;
    };
    unshift(item: T, idx?: number): T;
    first(): T;
    last(): T;
    random(): T;
    getInternal(): T[];
    copy(): QueueMeta<T>;
    clone(): QueueMeta<T>;
    get count(): number;
    iterate(): Generator<T, void, undefined>;
    [Symbol.iterator](): Generator<T, void, undefined>;
    toJSON(): T[];
    toArray(): T[];
}

declare const kInstance: unique symbol;
declare function singleton(): <T extends new (...args: any[] | undefined) => any>(targetClass: T) => T;

export { QueueMeta, QueueType, kInstance, singleton };
